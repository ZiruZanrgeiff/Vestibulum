<?php

$labelRegex = '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*';
$binNumberRegex = '0b[01]+';
$hexNumberRegex = '0x[0-9a-f]+';
$decNumberRegex = '0|[1-9][0-9]*';
$octNumberRegex = '0[0-9]+'; // 0-9 is intentional
$scriptOpenTagRegexPart = 'script[ \n\r\t]+language[ \n\r\t]*=[ \n\r\t]*(?:php|"php"|\'php\')[ \n\r\t]*>';

return [

    'PHP_PARSER_REGEX_TOKENS' => [

        T_OPEN_TAG      => '<\?php',
        T_WHITESPACE    => '[ \n\r\t]',
        T_VARIABLE      => '\$' . $labelRegex,
        T_STRING        => '[\'|"]' . $labelRegex,
        'T_LITERAL'     => $labelRegex,

        // keywords
        T_NAMESPACE     => 'namespace\b',
        T_USE           => 'use\b',
        T_DIR           => '__dir__\b',
        T_FILE          => '__file__\b',
        T_FUNC_C        => '__function__\b',
        T_LINE          => '__line__\b',
        T_METHOD_C      => '__method__\b',
        T_NS_C          => '__namespace__\b',
        T_TRAIT_C       => '__trait__\b',
        T_HALT_COMPILER => '__halt_compiler\b',
        T_ABSTRACT      => 'abstract\b',
        T_LOGICAL_AND   => 'and\b',
        T_ARRAY         => 'array\b' ,
        T_AS            => 'as\b',
        T_BREAK         => 'break\b' ,
        T_CALLABLE      => 'callable\b',
        T_CASE          => 'case\b',
        T_CATCH         => 'catch\b',
        T_CLASS         => 'class\b',
        T_CLONE         => 'clone\b',
        T_CONST         => 'const\b'  ,
        T_CONTINUE      => 'continue\b' ,
        T_DECLARE       => 'declare\b' ,
        T_DEFAULT       => 'default\b' ,
        T_EXIT          => 'die\b' ,
        T_DO            => 'do\b' ,
        T_ECHO          => 'echo\b' ,
        T_ELSE          => 'else\b' ,
        T_ELSEIF        => 'elseif\b' ,
        T_EMPTY         => 'empty\b'  ,
        T_ENDDECLARE    => 'enddeclare\b' ,
        T_ENDFOR        => 'endfor\b' ,
        T_ENDFOREACH    => 'endforeach\b' ,
        T_ENDIF         => 'endif\b'  ,
        T_ENDSWITCH     => 'endswitch\b'  ,
        T_ENDWHILE      => 'endwhile\b' ,
        T_EVAL          => 'eval\b'  ,
        T_EXIT          => 'exit\b'  ,
        T_EXTENDS       => 'extends\b'  ,
        T_FINAL         => 'final\b' ,
        T_FOR           => 'for\b' ,
        T_FOREACH       => 'foreach\b',
        T_FUNCTION      => 'function\b'  ,
        T_GLOBAL        => 'global\b'  ,
        T_GOTO          => 'goto\b'  ,
        T_IF            => 'if\b' ,
        T_IMPLEMENTS    => 'implements\b'  ,
        T_INCLUDE       => 'include\b'  ,
        T_INCLUDE_ONCE  => 'include_once\b' ,
        T_INSTANCEOF    => 'instanceof\b' ,
        T_INSTEADOF     => 'insteadof\b' ,
        T_INTERFACE     => 'interface\b' ,
        T_ISSET         => 'isset\b' ,
        T_LIST          => 'list\b' ,
        T_NEW           => 'new\b' ,
        T_LOGICAL_OR    => 'or\b' ,
        T_PRINT         => 'print\b' ,
        T_PRIVATE       => 'private\b'  ,
        T_PROTECTED     => 'protected\b'  ,
        T_PUBLIC        => 'public\b'  ,
        T_REQUIRE       => 'require\b',
        T_REQUIRE_ONCE  =>'require_once\b' ,
        T_RETURN        => 'return\b' ,
        T_STATIC        => 'static\b'  ,
        T_SWITCH        => 'switch\b' ,
        T_THROW         => 'throw\b',
        T_TRAIT         => 'trait\b',
        T_TRY           => 'try\b' ,
        T_UNSET         => 'unset\b'  ,
        T_VAR           => 'var\b'  ,
        T_WHILE         => 'while\b',
        T_LOGICAL_XOR   => 'xor\b',

        // comparison operators
        T_IS_IDENTICAL        => '===',
        T_IS_NOT_IDENTICAL    => '!==',
        T_IS_EQUAL            => '==',
        T_IS_NOT_EQUAL        => '!=',
        T_IS_NOT_EQUAL        => '<>',
        T_IS_GREATER_OR_EQUAL => '>=',
        T_IS_SMALLER_OR_EQUAL => '<=',

        // combined assignment operators
        T_PLUS_EQUAL   => '\+=',
        T_MINUS_EQUAL  => '-=',
        T_MUL_EQUAL    => '\*=',
        T_DIV_EQUAL    => '\/=',
        T_MOD_EQUAL    => '%=',
        T_CONCAT_EQUAL => '\.=',
        T_AND_EQUAL    => '&=',
        T_OR_EQUAL     => '\|=',
        T_XOR_EQUAL    => '\^=',
        T_SL_EQUAL     => '<<=',
        T_SR_EQUAL     => '>>=',


        // other operators
        T_DOUBLE_ARROW          => '=>' ,
        T_NS_SEPARATOR          => '\\\\' ,
        T_PAAMAYIM_NEKUDOTAYIM  => '::' ,
        T_BOOLEAN_OR            => '\|\|',
        T_BOOLEAN_AND           =>  '&&' ,
        T_SL                    => '<<' ,
        T_SR                    =>  '>>' ,
        T_DEC                   =>  '--' ,
        T_INC                   => '\+\+',


//      casts
//      '\([ \t]*array[ \t]*\)'                 => T_ARRAY_CAST,
//      '\([ \t]*bool(?:ean)?[ \t]*\)'          => T_BOOL_CAST,
//      '\([ \t]*(?:real|double|float)[ \t]*\)' => T_DOUBLE_CAST,
//      '\([ \t]*int(?:eger)?[ \t]*\)'          => T_INT_CAST,
//      '\([ \t]*object[ \t]*\)'                => T_OBJECT_CAST,
//      '\([ \t]*(?:string|binary)[ \t]*\)'     => T_STRING_CAST,
//      '\([ \t]*unset[ \t]*\)'                 => T_UNSET_CAST,

    ],

    'PHP_PARSER_TYPE_TOKENS' => [
        '<?php'           => T_OPEN_TAG,
        ' '               => T_WHITESPACE,
        'namespace'       => T_NAMESPACE,
        'variable'        => T_VARIABLE,
        'literal'         => 'T_LITERAL',
        'use'             => T_USE,
        '__class__'       => T_CLASS_C,
        'string'          => T_STRING,
        '__dir__'         => T_DIR,
        '__file__'        => T_FILE,
        '__function__'    => T_FUNC_C,
        '__halt_compiler' => T_HALT_COMPILER,
        '__line__'        => T_LINE,
        '__method__'      => T_METHOD_C,
        '__namespace__'   => T_NS_C,
        '__trait__'       => T_TRAIT_C,
        'abstract'        => T_ABSTRACT,
        'and'             => T_LOGICAL_AND,
        'array'           => T_ARRAY,
        'as'              => T_AS,
        'break'           => T_BREAK,
        'callable'        => T_CALLABLE,
        'case'            => T_CASE,
        'catch'           => T_CATCH,
        'class'           => T_CLASS,
        'clone'           => T_CLONE,

        'const'           => T_CONST,
        'continue'        => T_CONTINUE,
        'declare'         => T_DECLARE,
        'default'         => T_DEFAULT,
        'die'             => T_EXIT,
        'do'              => T_DO,
        'echo'            => T_ECHO,
        'else'            => T_ELSE,
        'elseif'          => T_ELSEIF,
        'empty'           => T_EMPTY,
        'enddeclare'      => T_ENDDECLARE,
        'endfor'          => T_ENDFOR,
        'endforeach'      => T_ENDFOREACH,
        'endif'           => T_ENDIF,
        'endswitch'       => T_ENDSWITCH,
        'endwhile'        => T_ENDWHILE,
        'eval'            => T_EVAL,
        'exit'            => T_EXIT,
        'extends'         => T_EXTENDS,
        'final'           => T_FINAL,
        'for'             => T_FOR,
        'foreach'         => T_FOREACH,
        'function'        => T_FUNCTION,
        'global'          => T_GLOBAL,
        'goto'            => T_GOTO,
        'if'              => T_IF,
        'implements'      => T_IMPLEMENTS,
        'include'         => T_INCLUDE,
        'include_once'    => T_INCLUDE_ONCE,
        'instanceof'      => T_INSTANCEOF,
        'insteadof'       => T_INSTEADOF,
        'interface'       => T_INTERFACE,
        'isset'           => T_ISSET,
        'list'            => T_LIST,
        'new'             => T_NEW,
        'or'              => T_LOGICAL_OR,
        'print'           => T_PRINT,
        'private'         => T_PRIVATE,
        'protected'       => T_PROTECTED,
        'public'          => T_PUBLIC,
        'require'         => T_REQUIRE,
        'require_once'    => T_REQUIRE_ONCE,
        'return'          => T_RETURN,
        'static'          => T_STATIC,
        'switch'          => T_SWITCH,
        'throw'           => T_THROW,
        'trait'           => T_TRAIT,
        'try'             => T_TRY,
        'unset'           => T_UNSET,
        'var'             => T_VAR,
        'while'           => T_WHILE,
        'xor'             => T_LOGICAL_XOR,

        // comparison operators
        '===' => T_IS_IDENTICAL,
        '!==' => T_IS_NOT_IDENTICAL,
        '=='  => T_IS_EQUAL,
        '!='  => T_IS_NOT_EQUAL,
        '<>'  => T_IS_NOT_EQUAL,
        '>='  => T_IS_GREATER_OR_EQUAL,
        '<='  => T_IS_SMALLER_OR_EQUAL,

        // combined assignment operators
        '+='  => T_PLUS_EQUAL,
        '-='  => T_MINUS_EQUAL,
        '*='  => T_MUL_EQUAL,
        '/='  => T_DIV_EQUAL,
        '%='  => T_MOD_EQUAL,
        '.='  => T_CONCAT_EQUAL,
        '&='  => T_AND_EQUAL,
        '|='  => T_OR_EQUAL,
        '^='  => T_XOR_EQUAL,
        '<<=' => T_SL_EQUAL,
        '>>=' => T_SR_EQUAL,

        // other operators
        '=>'  => T_DOUBLE_ARROW,
        '\\'  => T_NS_SEPARATOR,
        '::'  => T_PAAMAYIM_NEKUDOTAYIM,
        '||'  => T_BOOLEAN_OR,
        '&&'  => T_BOOLEAN_AND,
        '<<'  => T_SL,
        '>>'  => T_SR,
        '--'  => T_DEC,
        '++'  => T_INC,
    ]
]

//    'PHP_PARSER_TOKENS' => [

//
//        // number literals (order of rules is important)
//        '(?:[0-9]+\.[0-9]*|\.[0-9]+)(?:e[+-]?[0-9]+)?' => T_DNUMBER,
//        '[0-9]+e[+-]?[0-9]+' => T_DNUMBER,
//
//        // comments
//        '(?:#|//)[^\r\n?]*(?:\?(?!>)[^\r\n?]*)*(?:\r\n|\n|\r|(?=\?>)|$)' => T_COMMENT,
//
//        // strings
//        'b?\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'' => T_CONSTANT_ENCAPSED_STRING,
//        'b?\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*$' => T_ENCAPSED_AND_WHITESPACE, // unterminated string literal
//        'b?"[^"\\\\${]*(?:(?:\\\\.|\$(?!\{|' . $labelRegex . ')|\{(?!\$))[^"\\\\${]*)*"' => T_CONSTANT_ENCAPSED_STRING,
//

//        '[^"\\\\${]*(?:(?:\\\\.|\$(?!\{|' . $labelRegex . ')|\{(?!\$))[^"\\\\${]*)*' => T_ENCAPSED_AND_WHITESPACE,
//